---
description: react components
globs: *.tsx
alwaysApply: false
---

- component structure
  - use pascalCase function components
  - hooks (useEffect, useSignal, etc.) must be inside components
  - prefer preact signals over useState

```ts
// ❌ BAD - hooks outside component  
const count = useSignal(0);  
useEffect(() => {}, []);  
function app() {} // wrong casing  

// ✅ GOOD  
function MyComponent() {  
  const count = useSignal(0);  
  useEffect(() => {}, []);  
}
```

signals usage
- global state → signal()
- component state → useSignal()

```ts
// top-level signals  
import { signal } from "@preact/signals-react";  
const globalCount = signal(0);

// component signals  
import { useSignal, useComputed, useSignalEffect, useSignals } from "@preact/signals-react/runtime";  
function Counter() {  
  useSignals(); // required for signals (when using react, not preact)
  const count = useSignal(0);  
  const double = useComputed(() => count.value * 2);  
  useSignalEffect(() => console.log(`count: ${count.value}, x2: ${double.value}`));  
  return <div>{count}</div>;  
}

effect handling
- useEffect must be inside components
- cleanup when needed
- specify deps properly
- use AbortController for listeners

```ts
function MyComponent() {  
  useEffect(() => {  
    const controller = new AbortController();  
    const handler = () => {};  
    window.addEventListener('resize', handler, { signal: controller.signal });  

    return () => controller.abort();  
  }, []); // runs only on mount/unmount  
}
```